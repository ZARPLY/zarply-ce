name: zarply

run-name: ${{ gitea.actor }} has pushed
on:
  push:
    branches:  
      - '**'   ### this is done to prevent config runs when tagging
dependencies:
  checkov:
    version: "2.11.0"

jobs:
  build-and-test:
    runs-on: workstation.ubuntu.lts
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: print test
        run: echo "This is a test message"
    
  build:
    name: Build and analyze
    runs-on: workstation.ubuntu.lts
    container:
      image: gitea.cyber-mint.com/zarply/za-flutter:3.29.3
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Download sonar-scanner
        run: |
          curl --create-dirs -sSLo $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-6.2.1.4610-linux-x64.zip
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/

      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: $HOME/.sonar/sonar-scanner-6.2.1.4610-linux-x64/bin/sonar-scanner
        
  gitleaks:
    runs-on: workstation.ubuntu.lts
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Gitleaks
        run: |
          wget https://github.com/gitleaks/gitleaks/releases/download/v8.24.0/gitleaks_8.24.0_linux_x64.tar.gz
          tar -xzf gitleaks_8.24.0_linux_x64.tar.gz
          chmod +x gitleaks
          sudo mv gitleaks /usr/local/bin/

      - name: Run Gitleaks scan
        run: |
          gitleaks detect --source . --report-path gitleaks-report.json --exit-code 1

      - name: Upload Gitleaks Report
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: gitleaks-report
          path: gitleaks-report.json

  clean_containers:
    needs: flake8-linting
    runs-on: workstation.ubuntu.lts
    steps:
      - name: Stop Docker Containers and Uvicorn
        run: |
          docker ps -a
          docker image ls
          docker stop $(docker ps -a -q) || true
          docker rm $(docker ps -a -q) || true
          docker image prune -f || true # shellcheck disable=SC2046
          docker volume rm $(docker volume ls --format "{{.Name}}") || true
          docker network prune -f || true
          pid=$(sudo lsof -t -i:8000) || true
          sudo kill $pid || true
          pid=$(sudo lsof -t -i:8001) || true
          sudo kill $pid || true

  # build-and-test-mac:
  #   runs-on: workstation.mac
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: print test
  #       run: echo "This is a test message"

# example of testing pipline 
  # flutter_test:
  #   runs-on: workstation.ubuntu.lts
  #   container:
  #     image: gitea.cyber-mint.com/pumppay/pp-flutter:latest
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v2

  #     - name: Verify Flutter installation
  #       run: flutter doctor -v

  #     - name: Run Flutter Tests
  #       run: flutter test


      
